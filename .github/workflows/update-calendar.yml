name: Update Calendar

on:
  workflow_dispatch:
  schedule:
    - cron: "0 14 * * *"  # 每天 22:00 自动运行

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 📂 确保数据目录和文件存在
        run: |
          mkdir -p data/Document
          for file in calendar.json astro.json shichen.json jieqi.json holidays.json; do
            if [ ! -f "Document/$file" ]; then
              echo "[]" > "data/Document/$file"
            fi
          done

      - name: 🧑‍💻 缓存 Node.js 模块
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ⚠️ 确保 `package-lock.json` 存在并非空
        run: |
          if [ ! -f "package-lock.json" ] || [ ! -s "package-lock.json" ]; then
            echo "package-lock.json 文件缺失或为空！重新生成..."
            npm install --package-lock-only
          else
            echo "package-lock.json 存在且不为空，跳过重新生成。"
          fi

      - name: 📦 安装依赖
        run: npm ci

      - name: 🔄 运行数据获取脚本并生成 ICS 文件
        run: |
          set -e
          echo "🛰️ 获取数据..."
          node scripts/fetch-data.js
          echo "📅 生成 ICS 文件..."
          node scripts/generate-ics.js

      - name: ⚙️ 检查是否有更改
        id: check_changes
        run: |
          echo "🔍 检查是否有更改..."
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "📝 检测到更改"
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "没有更改"
            echo "changes=false" >> $GITHUB_ENV
          fi

      - name: 🚀 提交更改
        if: env.changes == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"

          # 执行 stash 和 pop 仅在有更改时
          git stash || echo "没有要暂存的更改"
          git fetch origin main
          git pull --rebase origin main
          git stash pop || echo "没有暂存的更改"

          git add .
          git commit -m "🔄 更新数据和 calendar.ics"
          git push origin main

      - name: 🏗️ 创建 Pull Request
        if: env.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          title: "更新数据和 calendar.ics"
          branch: "update-calendar"
          commit-message: "更新数据和 calendar.ics"
          delete-branch: true
          base: main  # 确保 PR 是基于 `main` 分支的