

// **扁平化 calendar 数据**
const flattenCalendarData = (data) => {
  if (!data || typeof data !== 'object') return {};
  const { errno, errmsg, data: rawData } = data;
  if (!rawData) return {};
  const { lunar, almanac, ...flatData } = rawData;
  flatData.festivals = (rawData.festivals || []).join(',');
  flatData.pengzubaiji = (almanac?.pengzubaiji || []).join(',');
  flatData.liuyao = almanac?.liuyao || '';
  flatData.jiuxing = almanac?.jiuxing || '';
  flatData.taisui = almanac?.taisui || '';
  Object.assign(flatData, lunar, almanac);
  Object.assign(flatData, almanac?.jishenfangwei);
  delete flatData.jishenfangwei;
  return { errno, errmsg, ...flatData };
};

// **处理并保存数据**
const saveData = async (data) => {
  await ensureDirectoryExists(DATA_PATH);
  for (const [file, content] of Object.entries(data)) {
    const filePath = `${DATA_PATH}/${file}`;
    let existingContent = {};
    try {
      existingContent = JSON.parse(await fs.readFile(filePath, 'utf8'));
    } catch {}
    const mergedData = deepmerge(existingContent, content);
    try {
      await fs.writeFile(filePath, JSON.stringify(mergedData, null, 2), 'utf8');
      await logMessage(`✅ ${file} 保存成功: ${Object.keys(mergedData).length} 条记录`);
    } catch (error) {
      await logMessage(`❌ 保存 ${file} 失败: ${error.message}`);
    }
  }
};

// **抓取数据**
const fetchData = async () => {
  await logMessage('🚀 开始数据抓取...');
  await ensureDirectoryExists(DATA_PATH);
  const today = moment().tz('Asia/Shanghai').format('YYYY-MM-DD');
  const startDate = moment('2025-02-11').tz('Asia/Shanghai');
  for (let currentDate = startDate; currentDate.isSameOrBefore(today); currentDate.add(1, 'days')) {
    const dateStr = currentDate.format('YYYY-MM-DD');
    await logMessage(`📅 处理日期: ${dateStr}`);
    try {
      const [calendarData, astroData, shichenData, jieqiData, holidaysData] = await Promise.all([
        fetchDataFromApi('https://api.timelessq.com/time', { datetime: dateStr }),
        fetchDataFromApi('https://api.timelessq.com/time/astro', { keyword: dateStr }),
        fetchDataFromApi('https://api.timelessq.com/time/shichen', { date: dateStr }),
        fetchDataFromApi('https://api.timelessq.com/time/jieqi', { year: dateStr.split('-')[0] }),
        fetchDataFromApi('https://api.jiejiariapi.com/v1/holidays/' + dateStr.split('-')[0])
      ]);
      const processedCalendarData = flattenCalendarData(calendarData);
      const filteredData = {
        'calendar.json': { [dateStr]: { "Reconstruction": [processedCalendarData] } },
        'astro.json': { [dateStr]: { "Reconstruction": [astroData] } },
        'shichen.json': { [dateStr]: { "Reconstruction": [shichenData] } },
        'jieqi.json': { [dateStr]: { "Reconstruction": [jieqiData] } },
        'holidays.json': { [dateStr]: { "Reconstruction": [holidaysData] } }
      };
      await saveData(filteredData);
      await logMessage(`✅ ${dateStr} 数据保存成功`);
    } catch (error) {
      await logMessage(`⚠️ ${dateStr} 处理失败: ${error.message}`);
    }
  }
  await logMessage('🎉 所有数据抓取完成！');
};
fetchData().catch(async (error) => {
  await logMessage(`🔥 任务失败: ${error.message}`);
  process.exit(1);
});
